// <auto-generated/>
#nullable enable

namespace JsonSerializerSample
{
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Text.Json.SourceGeneration", "6.0.0.0")]
    internal partial class BooksJsonContext
    {
        
        private static global::System.Text.Json.JsonSerializerOptions s_defaultOptions { get; } = new global::System.Text.Json.JsonSerializerOptions()
        {
            DefaultIgnoreCondition = global::System.Text.Json.Serialization.JsonIgnoreCondition.Never,
            IgnoreReadOnlyFields = false,
            IgnoreReadOnlyProperties = false,
            IncludeFields = false,
            WriteIndented = true,
        };
        
        private static global::JsonSerializerSample.BooksJsonContext? s_defaultContext;
        public static global::JsonSerializerSample.BooksJsonContext Default => s_defaultContext ??= new global::JsonSerializerSample.BooksJsonContext(new global::System.Text.Json.JsonSerializerOptions(s_defaultOptions));
        
        public BooksJsonContext() : base(null, s_defaultOptions)
        {
        }
        
        public BooksJsonContext(global::System.Text.Json.JsonSerializerOptions options) : base(options, s_defaultOptions)
        {
        }
        
        private global::System.Text.Json.Serialization.JsonConverter? GetRuntimeProvidedCustomConverter(global::System.Type type)
        {
            global::System.Collections.Generic.IList<global::System.Text.Json.Serialization.JsonConverter> converters = Options.Converters;
        
            for (int i = 0; i < converters.Count; i++)
            {
                global::System.Text.Json.Serialization.JsonConverter? converter = converters[i];
        
                if (converter.CanConvert(type))
                {
                    if (converter is global::System.Text.Json.Serialization.JsonConverterFactory factory)
                    {
                        converter = factory.CreateConverter(type, Options);
                        if (converter == null || converter is global::System.Text.Json.Serialization.JsonConverterFactory)
                        {
                            throw new global::System.InvalidOperationException($"The converter '{factory.GetType()}' cannot return null or a JsonConverterFactory instance.");
                        }
                    }
        
                    return converter;
                }
            }
        
            return null;
        }
    }
}
